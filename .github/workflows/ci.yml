name: CI

on:
  push:
    branches: [ main, self]
  pull_request:
    branches: [ main, self]

permissions:
  contents: read

jobs:
  build-and-validate:
    runs-on: self-hosted  # 使用 self-hosted runner
    timeout-minutes: 60   # 增加超时时间，因为本地环境可能需要更多时间
    defaults:
      run:
        shell: bash
        working-directory: mirco_service_fox
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      # 移除 setup-go action，假设 self-hosted runner 已经安装了 Go
      - name: 验证Go环境
        run: |
          go version
          echo "Go环境已就绪"

      # 移除缓存步骤，使用本地缓存
      - name: 清理Go模块缓存 (可选)
        run: |
          echo "使用本地Go模块缓存"
          go clean -modcache || true

      - name: 下载 Go 模块依赖
        env:
          GOPROXY: https://proxy.golang.org,direct
        run: |
          for d in gateway experiment-service user-service notification-service submission-service; do
            echo "==> go mod download in $d"
            (cd "$d" && go mod download)
          done

      - name: Go Build (gateway)
        run: |
          cd gateway
          go build ./...

      - name: Go Build (experiment-service)
        run: |
          cd experiment-service
          go build ./...

      - name: Go Build (user-service)
        run: |
          cd user-service
          go build ./...

      - name: Go Build (notification-service)
        run: |
          cd notification-service
          go build ./...

      - name: Go Build (submission-service)
        run: |
          cd submission-service
          go build ./...

      # 移除 setup-python action，假设 self-hosted runner 已经安装了 Python
      - name: 验证Python环境
        run: |
          python3 --version || python --version
          pip3 --version || pip --version
          echo "Python环境已就绪"

      - name: Python deps (judge-service)
        run: |
          cd judge-service
          python3 -m pip install -U pip || python -m pip install -U pip
          pip3 install -r requirements.txt || pip install -r requirements.txt
          python3 - <<'PY' || python - <<'PY'
          import flask
          print('Flask version:', flask.__version__)
          PY

      # 移除 setup-node action，假设 self-hosted runner 已经安装了 Node.js
      - name: 验证Node环境
        run: |
          node --version
          npm --version
          echo "Node.js环境已就绪"

      - name: 安装前端依赖并构建
        run: |
          cd ..
          cd smartfox_front
          npm ci
          CI=false npm run build

      # 移除 docker/setup-buildx-action，使用本地 Docker
      - name: 验证Docker环境
        run: |
          docker --version
          docker-compose --version || docker compose version || echo "Docker Compose not required for this step"
          echo "Docker环境已就绪"

      - name: 构建docker镜像
        run: |
          docker build -t gateway:ci ./gateway
          docker build -t experiment-service:ci ./experiment-service
          docker build -t user-service:ci ./user-service
          docker build -t notification-service:ci ./notification-service
          docker build -t submission-service:ci ./submission-service
          docker build -t judge-service:ci ./judge-service
          # frontend image (path out of mirco_service_fox)
          cd ..
          docker build -t smartfox-front:ci ./smartfox_front

      # 移除 helm/kind-action，使用本地安装的 KinD
      - name: 验证KinD环境
        run: |
          kind --version
          kubectl version --client
          echo "KinD和kubectl环境已就绪"

      - name: 清理之前的集群（如果存在）
        run: |
          kind delete cluster --name smartfox-ci || echo "集群不存在，跳过删除"

      - name: Deploy to KinD and run smoke tests
        run: |
          chmod +x .github/scripts/kind-deploy-and-test.sh
          .github/scripts/kind-deploy-and-test.sh
      - name: E2E smoke
        run: |
          # 使用本地安装的 jq，如果没有则安装
          if ! command -v jq &> /dev/null; then
            if [[ "$OSTYPE" == "darwin"* ]]; then
              brew install jq
            elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
              sudo apt-get update && sudo apt-get install -y jq
            fi
          fi
          chmod +x .github/scripts/smoke-e2e.sh
          .github/scripts/smoke-e2e.sh
      - name: Postman tests
        run: |
          chmod +x .github/scripts/run-newman.sh
          .github/scripts/run-newman.sh
